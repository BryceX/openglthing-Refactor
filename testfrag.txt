#version 410
in vec3 vPosition;
in vec2 vTexCoord;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
out vec4 FragColor;

uniform vec3 cameraPosition;
uniform vec3 lightDirection;
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform sampler2D specularMap;
uniform float specPow = .7f;

uniform int TOGGLE;

void main()
{
	vec3 diffuseMapColor = texture(diffuseMap, vTexCoord).xyz;
	vec3 normalMapDirection = texture(normalMap, vTexCoord).xyz;
	vec3 specularMapColor = texture(specularMap,vTexCoord).xyz;
	
	mat3 TBN = mat3(normalize(vTangent), normalize(vBiTangent), normalize(vNormal));
	vec3 N = TBN * (normalize(normalMapDirection * 2-1)); // normal map normal
	
	if(TOGGLE == 1)
	{
	N = vNormal.xyz;
	
	}
	
	
	float d = max(0, dot(N, lightDirection)); // lambertian term
					

	vec3 E = normalize( cameraPosition - vPosition.xyz );
	vec3 R = reflect( -lightDirection, vNormal.xyz ); 
	float s = max( 0, dot( E, R ) );
	s = pow( s, specPow );							// specular term
	
	vec3 diffuse = diffuseMapColor * d;
	vec3 specular = specularMapColor * s;
	
	FragColor = vec4(diffuse + specular,1);	
	
	FragColor = vec4(specular,1);
}